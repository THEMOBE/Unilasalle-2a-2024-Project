# Filter outliers
filter_rev <- data %>%
filter(CHAFF >= lower_bound & CHAFF <= upper_bound)
Q1 <- quantile(revenues$CHAFF, 0.25)
Q3 <- quantile(revenues$CHAFF, 0.75)
IQR <- Q3 - Q1
# Define bounds
lower_bound <- Q1 - 1.5 * IQR
upper_bound <- Q3 + 1.5 * IQR
# Filter outliers
filter_rev <- RICA %>%
filter(CHAFF >= lower_bound & CHAFF <= upper_bound)
# Assuming 'revenues' is the correct DataFrame and should be used instead of 'data'
# Recalculate bounds based on 'revenues'
Q1 <- quantile(revenues$CHAFF, 0.25, na.rm = TRUE)
Q3 <- quantile(revenues$CHAFF, 0.75, na.rm = TRUE)
IQR <- Q3 - Q1
lower_bound <- Q1 - 1.5 * IQR
upper_bound <- Q3 + 1.5 * IQR
# Filter outliers in 'revenues'
filter_rev <- revenues %>%
filter(CHAFF >= lower_bound & CHAFF <= upper_bound)
Emaintenance =RICA [, c("ENTMT")]
#Assuming 'revenues' is the correct DataFrame and should be used instead of 'data'
# Recalculate bounds based on 'revenues'
Q1 <- quantile(Emaintenance$CHAFF, 0.25, na.rm = TRUE)
Q3 <- quantile(revenues$CHAFF, 0.75, na.rm = TRUE)
IQR <- Q3 - Q1
lower_bound <- Q1 - 1.5 * IQR
upper_bound <- Q3 + 1.5 * IQR
# Filter outliers in 'revenues'
filter_Emain <- Emaintenance %>%
filter(CHAFF >= lower_bound & CHAFF <= upper_bound)
#Assuming 'revenues' is the correct DataFrame and should be used instead of 'data'
# Recalculate bounds based on 'revenues'
Q1 <- quantile(Emaintenance$ENTMT, 0.25, na.rm = TRUE)
# Load the necessary library
library(dplyr)
# Convert CHAFF to numeric if it's not, handling non-numeric entries gracefully
Emaintenance$ENTMT <- as.numeric(as.character(Emaintenance$ENTMT))
# Check again if there are any values that couldn't be converted (which will now be NA)
sum(is.na(Emaintenance$ENTMT))
# Optionally, remove rows with NA in CHAFF if necessary
Emaintenance <- Emaintenance %>% filter(!is.na(ENTMT))
#Assuming 'revenues' is the correct DataFrame and should be used instead of 'data'
# Recalculate bounds based on 'revenues'
Q1 <- quantile(Emaintenance$ENTMT, 0.25, na.rm = TRUE)
Q3 <- quantile(Emaintenance$ENTMT, 0.75, na.rm = TRUE)
IQR <- Q3 - Q1
lower_bound <- Q1 - 1.5 * IQR
upper_bound <- Q3 + 1.5 * IQR
# Filter outliers in 'revenues'
filter_Emain <- Emaintenance %>%
filter(ENTMT >= lower_bound & ENTMT<= upper_bound)
install.packages("ggplot2")
}
install.packages("ggplot2")
# Load ggplot2
library(ggplot2)
ggplot(RICA, aes(x = EFF10)) +
geom_histogram(bins = 30, fill = "blue", color = "black") +  # Adjust the number of bins as needed
labs(title = "Histogram of EFF10",
x = "EFF10",
y = "Frequency") +
theme_minimal()
ggplot(RICA, aes(x = EFF10)) +
geom_histogram(bins = 10, fill = "blue", color = "black") +  # Adjust the number of bins as needed
labs(title = "Histogram of EFF10",
x = "EFF10",
y = "Frequency") +
theme_minimal()
ggplot(RICA, aes(x = EFF10)) +
geom_histogram(bins = 14, fill = "blue", color = "black") +  # Adjust the number of bins as needed
labs(title = "Histogram of EFF10",
x = "EFF10",
y = "Frequency") +
theme_minimal()
ggplot(RICA, aes(x = EFF10)) +
geom_histogram(bins = 12.5, fill = "blue", color = "black") +  # Adjust the number of bins as needed
labs(title = "Histogram of EFF10",
x = "EFF10",
y = "Frequency") +
theme_minimal()
ggplot(RICA, aes(x = EFF10)) +
geom_histogram(bins = 12, fill = "blue", color = "black") +  # Adjust the number of bins as needed
labs(title = "Histogram of EFF10",
x = "EFF10",
y = "Frequency") +
theme_minimal()
#Assuming 'revenues' is the correct DataFrame and should be used instead of 'data'
# Recalculate bounds based on 'revenues'
Q1 <- quantile(Employment$EFF10, 0.25, na.rm = TRUE)
Q3 <- quantile(Employment$EFF10, 0.75, na.rm = TRUE)
IQR <- Q3 - Q1
lower_bound <- Q1 - 1.5 * IQR
upper_bound <- Q3 + 1.5 * IQR
# Filter outliers in 'revenues'
filter_empl <- Emaintenance %>%
filter(EFF10 >= lower_bound & EFF10<= upper_bound)
#Assuming 'revenues' is the correct DataFrame and should be used instead of 'data'
# Recalculate bounds based on 'revenues'
Q1 <- quantile(Employment$EFF10, 0.25, na.rm = TRUE)
Q3 <- quantile(Employment$EFF10, 0.75, na.rm = TRUE)
IQR <- Q3 - Q1
lower_bound <- Q1 - 1.5 * IQR
upper_bound <- Q3 + 1.5 * IQR
# Filter outliers in 'revenues'
filter_empl <- Employment %>%
filter(EFF10 >= lower_bound & EFF10<= upper_bound)
ggplot(filter_empl, aes(x = EFF10)) +
geom_histogram(bins = 12, fill = "blue", color = "black") +  # Adjust the number of bins as needed
labs(title = "Histogram of EFF10",
x = "EFF10",
y = "Frequency") +
theme_minimal()
ggplot(filter_empl, aes(x = EFF10)) +
geom_histogram(bins = 5, fill = "blue", color = "black") +  # Adjust the number of bins as needed
labs(title = "Histogram of EFF10",
x = "EFF10",
y = "Frequency") +
theme_minimal()
ggplot(filter_empl, aes(x = EFF10)) +
geom_histogram(bins = 5, fill = "blue", color = "black") +  # Adjust the number of bins as needed
labs(title = "Employment # withought outliers",
x = "EFF10",
y = "Frequency") +
theme_minimal()
ggplot(RICA, aes(x = EFF10)) +
geom_histogram(bins = 12, fill = "blue", color = "black") +  # Adjust the number of bins as needed
labs(title = "Histogram of EFF10",
x = "EFF10",
y = "Frequency") +
theme_minimal()
ggplot(RICA, aes(x = EFF10)) +
geom_histogram(bins = 5, fill = "blue", color = "black") +  # Adjust the number of bins as needed
labs(title = "Histogram of EFF10",
x = "EFF10",
y = "Frequency") +
theme_minimal()
ggplot(RICA, aes(x = EFF10)) +
geom_histogram(bins = 5, fill = "blue", color = "black") +  # Adjust the number of bins as needed
labs(title = "Histogram of EFF10",
x = "EFF10",
y = "Count") +
theme_minimal()
ggplot(RICA, aes(x = EFF10)) +
geom_histogram(bins = 30, fill = "blue", color = "black") +
scale_x_continuous(
breaks = seq(min_value, max_value, by = step_size),  # Define custom breaks
labels = c("Label1", "Label2", "Label3")  # Define custom labels
) +
labs(title = "Histogram of EFF10", x = "EFF10", y = "Frequency") +
theme_minimal()
ggplot(RICA, aes(x = EFF10)) +
geom_histogram(bins = 5, fill = "blue", color = "black") +  # Adjust the number of bins as needed
labs(title = "Histogram of EFF10",
x = "Employee",
y = "Count") +
theme_minimal()
ggplot(RICA, aes(x = EFF10)) +
geom_histogram(bins = 10, fill = "blue", color = "black") +  # Adjust the number of bins as needed
labs(title = "Histogram of EFF10",
x = "Employee",
y = "Count") +
theme_minimal()
ggplot(RICA, aes(x = EFF10)) +
geom_histogram(bins = 20, fill = "blue", color = "black") +  # Adjust the number of bins as needed
labs(title = "Histogram of EFF10",
x = "Employee",
y = "Count") +
theme_minimal()
ggplot(RICA, aes(x = EFF10)) +
geom_histogram(bins = 30, fill = "blue", color = "black") +  # Adjust the number of bins as needed
labs(title = "Histogram of EFF10",
x = "Employee",
y = "Count") +
theme_minimal()
ggplot(RICA, aes(x = EFF10)) +
geom_histogram(bins = 50, fill = "blue", color = "black") +  # Adjust the number of bins as needed
labs(title = "Histogram of EFF10",
x = "Employee",
y = "Count") +
theme_minimal()
ggplot(RICA, aes(x = EFF10)) +
geom_histogram(bins = 30, fill = "blue", color = "black") +  # Adjust the number of bins as needed
labs(title = "Histogram of EFF10",
x = "Employee",
y = "Count") +
theme_minimal()
ggplot(RICA, aes(x = EFF10)) +
geom_histogram(bins = 30, fill = "blue", color = "black") +  # Adjust the number of bins as needed
labs(title = "Employment Graph with outliers",
x = "Employee",
y = "Count") +
theme_minimal()
ggplot(filter_empl, aes(x = EFF10)) +
geom_histogram(bins = 5, fill = "blue", color = "black") +  # Adjust the number of bins as needed
labs(title = "Employment # withought outliers",
x = "Employee",
y = "Count") +
theme_minimal()
# Calculate averages
average_chaff <- mean(RICA$CHAFF, na.rm = TRUE)
average_eff10 <- mean(RICA$EFF10, na.rm = TRUE)
# Prepare data for plotting
average_data <- data.frame(
Category = c("CHAFF", "EFF10"),
Average = c(average_chaff, average_eff10)
)
# Create a bar plot
ggplot(average_data, aes(x = Category, y = Average, fill = Category)) +
geom_bar(stat = "identity", width = 0.5) +
scale_fill_brewer(palette = "Pastel1") +
labs(title = "Average Values of CHAFF and EFF10",
x = "Variable",
y = "Average Value") +
theme_minimal()
# Check the structure of the data to identify any incorrect data types
str(RICA)
# Convert CHAFF and EFF10 to numeric, coercing errors to NA
RICA$CHAFF <- as.numeric(as.character(RICA$CHAFF))
RICA$EFF10 <- as.numeric(as.character(RICA$EFF10))
# Check again if any non-numeric values have been converted to NA
sum(is.na(RICA$CHAFF))
sum(is.na(RICA$EFF10))
# Calculate averages again after ensuring the data is numeric
average_chaff <- mean(RICA$CHAFF, na.rm = TRUE)
average_eff10 <- mean(RICA$EFF10, na.rm = TRUE)
# Prepare data for plotting, ensuring that NA values are handled
average_data <- data.frame(
Category = c("CHAFF", "EFF10"),
Average = c(average_chaff, average_eff10)
)
# Remove any NA values from average_data to avoid issues in plotting
average_data <- na.omit(average_data)
# Create a bar plot
ggplot(average_data, aes(x = Category, y = Average, fill = Category)) +
geom_bar(stat = "identity", width = 0.5) +
scale_fill_brewer(palette = "Pastel1") +
labs(title = "Average Values of CHAFF and EFF10",
x = "Variable",
y = "Average Value") +
theme_minimal()
# Load necessary libraries
library(dplyr)
library(ggplot2)
# First, ensure both EFF10 and CHAFF are appropriately formatted:
RICA$EFF10 <- as.factor(RICA$EFF10)  # Ensure EFF10 is treated as a categorical variable
RICA$CHAFF <- as.numeric(as.character(RICA$CHAFF))  # Convert CHAFF to numeric if it's not
# Aggregate data to calculate average CHAFF per EFF10 category
average_chaff_by_eff10 <- RICA %>%
group_by(EFF10) %>%
summarise(AverageCHAFF = mean(CHAFF, na.rm = TRUE))  # Compute mean, remove NA values
# Check the output
print(average_chaff_by_eff10)
# Create a bar plot showing average CHAFF for each EFF10 category
ggplot(average_chaff_by_eff10, aes(x = EFF10, y = AverageCHAFF, fill = EFF10)) +
geom_bar(stat = "identity", width = 0.5) +  # Use identity to use AverageCHAFF as the height
scale_fill_brewer(palette = "Pastel1") +  # Optional: Use a color palette for aesthetics
labs(title = "Average Earnings by EFF10 Category",
x = "EFF10 Category",
y = "Average Earnings (CHAFF)") +
theme_minimal()  # Use a minimalistic theme for a cleaner look
# Create a bar plot showing average CHAFF for each EFF10 category
ggplot(average_chaff_by_eff10, aes(x = EFF10, y = AverageCHAFF, fill = EFF10)) +
geom_bar(stat = "identity", width = 0.5) +  # Use identity to use AverageCHAFF as the height
scale_fill_brewer(palette = "gray") +  # Optional: Use a color palette for aesthetics
labs(title = "Average Earnings by EFF10 Category",
x = "EFF10 Category",
y = "Average Earnings (CHAFF)") +
theme_minimal()  # Use a minimalistic theme for a cleaner look
# Create a bar plot showing average CHAFF for each EFF10 category
ggplot(average_chaff_by_eff10, aes(x = EFF10, y = AverageCHAFF, fill = EFF10)) +
geom_bar(stat = "identity", width = 0.5) +  # Use identity to use AverageCHAFF as the height
scale_fill_brewer(palette = "Pastel1") +  # Optional: Use a color palette for aesthetics
labs(title = "Average Earnings by EFF10 Category",
x = "EFF10 Category",
y = "Average Earnings (CHAFF)") +
theme_minimal()  # Use a minimalistic theme for a cleaner look
# Create a bar plot showing average CHAFF for each EFF10 category
ggplot(average_chaff_by_eff10, aes(x = EFF10, y = AverageCHAFF, fill = EFF10)) +
geom_bar(stat = "identity", width = 0.5) +  # Use identity to use AverageCHAFF as the height
scale_fill_brewer(palette = "Pastel2") +  # Optional: Use a color palette for aesthetics
labs(title = "Average Earnings by EFF10 Category",
x = "EFF10 Category",
y = "Average Earnings (CHAFF)") +
theme_minimal()  # Use a minimalistic theme for a cleaner look
# Create a bar plot showing average CHAFF for each EFF10 category
ggplot(average_chaff_by_eff10, aes(x = EFF10, y = AverageCHAFF, fill = EFF10)) +
geom_bar(stat = "identity", width = 0.5) +  # Use identity to use AverageCHAFF as the height
scale_fill_brewer(palette = "Pastel3") +  # Optional: Use a color palette for aesthetics
labs(title = "Average Earnings by EFF10 Category",
x = "EFF10 Category",
y = "Average Earnings (CHAFF)") +
theme_minimal()  # Use a minimalistic theme for a cleaner look
# Create a bar plot showing average CHAFF for each EFF10 category
ggplot(average_chaff_by_eff10, aes(x = EFF10, y = AverageCHAFF, fill = EFF10)) +
geom_bar(stat = "identity", width = 0.5) +  # Use identity to use AverageCHAFF as the height
scale_fill_brewer(palette = "Pastel2") +  # Optional: Use a color palette for aesthetics
labs(title = "Average Earnings by EFF10 Category",
x = "EFF10 Category",
y = "Average Earnings (CHAFF)") +
theme_minimal()  # Use a minimalistic theme for a cleaner look
# Create a bar plot showing average CHAFF for each EFF10 category
ggplot(average_chaff_by_eff10, aes(x = EFF10, y = AverageCHAFF, fill = EFF10)) +
geom_bar(stat = "identity", width = 0.5) +  # Use identity to use AverageCHAFF as the height
scale_fill_brewer(palette = "Pastel2") +  # Optional: Use a color palette for aesthetics
labs(title = "Average Earnings by Employee Category",
x = "EFF10 Category",
y = "Average Earnings (CHAFF)") +
theme_minimal()  # Use a minimalistic theme for a cleaner look
# Create a bar plot showing average CHAFF for each EFF10 category
ggplot(average_chaff_by_eff10, aes(x = EFF10, y = AverageCHAFF, fill = EFF10)) +
geom_bar(stat = "identity", width = 0.5) +  # Use identity to use AverageCHAFF as the height
scale_fill_brewer(palette = "Pastel1") +  # Optional: Use a color palette for aesthetics
labs(title = "Average Earnings by EFF10 Category",
x = "EFF10 Category",
y = "Average Earnings (CHAFF)") +
theme_minimal()  # Use a minimalistic theme for a cleaner look
# Create a bar plot showing average CHAFF for each EFF10 category
ggplot(average_chaff_by_eff10, aes(x = EFF10, y = AverageCHAFF, fill = EFF10)) +
geom_bar(stat = "identity", width = 0.5) +  # Use identity to use AverageCHAFF as the height
scale_fill_brewer(palette = "Pastel2") +  # Optional: Use a color palette for aesthetics
labs(title = "Average Earnings by Employee Category",
x = "EFF10 Category",
y = "Average Earnings (CHAFF)") +
theme_minimal()  # Use a minimalistic theme for a cleaner look
# Create a bar plot showing average CHAFF for each EFF10 category
ggplot(average_chaff_by_eff10, aes(x = EFF10, y = AverageCHAFF, fill = EFF10)) +
geom_bar(stat = "identity", width = 0.5) +  # Use identity to use AverageCHAFF as the height
scale_fill_brewer(palette = "Pastel2") +  # Optional: Use a color palette for aesthetics
labs(title = "Average Earnings by Employee Category",
x = "Employment Category",
y = "Average Revenue") +
theme_minimal()  # Use a minimalistic theme for a cleaner look
# Load necessary libraries
library(ggplot2)
library(dplyr)
# Assuming RICA is already loaded
# You might need to convert FOAGR to a factor if it's not already
RICA$FOAGR <- as.factor(RICA$FOAGR)
# Create histograms with facets for each education level
ggplot(RICA, aes(x = EFF10)) +
geom_histogram(bins = 30, fill = "skyblue", color = "black") +
facet_wrap(~ FOAGR, scales = "free_y") +  # Use free_y to scale histograms individually
labs(title = "Distribution of Number of Employees by Farmer's Education",
x = "Number of Employees",
y = "Frequency") +
theme_minimal()
# Load necessary libraries
library(ggplot2)
library(dplyr)
# Assuming RICA is already loaded
# You might need to convert FOAGR to a factor if it's not already
RICA$FOAGR <- as.factor(RICA$FOAGR)
# Create histograms with facets for each education level
ggplot(RICA, aes(x = EFF10)) +
geom_histogram(bins = 30, fill = "skyblue", color = "black") +
facet_wrap(~ FOAGR, scales = "free_y") +  # Use free_y to scale histograms individually
labs(title = "Distribution of Number of Employees by Farmer's Education",
x = "Number of Employees",
y = "Frequency") +
theme_minimal()
# Assuming EFF10 is categorical and FOAGR represents groups
ggplot(RICA, aes(x = as.factor(EFF10), fill = as.factor(FOAGR))) +
geom_bar(position = "dodge") +
facet_wrap(~ FOAGR, scales = "free_y") +
labs(title = "Count of Different EFF10 Values by Education Level",
x = "EFF10 Categories",
y = "Count") +
theme_minimal()
# Assuming EFF10 is categorical and FOAGR represents groups
ggplot(RICA, aes(x = as.factor(EFF10), fill = as.factor(FOAGR))) +
geom_bar(position = "dodge") +
facet_wrap(~ FOAGR, scales = "free_y") +
labs(title = "Count of Employees by Education Level",
x = "Employee Categories",
y = "Employee Count") +
theme_minimal()
# Load necessary library
library(dplyr)
# Check the structure of your data
str(RICA)
# Assuming RICA is loaded and FOAGR is a factor with ordered levels
# Convert FOAGR to an ordered numeric value if it's not numeric
RICA <- RICA %>%
mutate(
NumericFOAGR = as.numeric(FOAGR)  # Converts factors to their underlying integer levels
)
# Check for NAs and remove rows with NA values in either column if necessary
RICA <- RICA %>%
filter(!is.na(EFF10) & !is.na(NumericFOAGR))
# Load necessary library
library(stats)
# Perform Spearman's rank correlation test
correlation_test <- cor.test(RICA$EFF10, RICA$NumericFOAGR, method = "spearman")
# Check the structure of EFF10 and NumericFOAGR to understand their data types
str(RICA$EFF10)
str(RICA$NumericFOAGR)
# Convert EFF10 to numeric if it's not already. This step handles factors or character types by converting them to numeric
# Conversions might result in NAs if some entries cannot be converted directly
RICA$EFF10 <- as.numeric(as.character(RICA$EFF10))
# Check again after conversion
str(RICA$EFF10)
# Remove any rows with NA values in these columns, as NA values can disrupt correlation tests
RICA <- RICA %>% filter(!is.na(EFF10) & !is.na(NumericFOAGR))
# Perform Spearman's rank correlation test again
correlation_test <- cor.test(RICA$EFF10, RICA$NumericFOAGR, method = "spearman")
# Output the results of the correlation test
print(correlation_test)
ggplot(RICA, aes(x = NumericFOAGR, y = EFF10)) +
geom_point(alpha = 0.6) +  # Plot points with partial transparency
geom_smooth(method = "loess", color = "blue") +  # Add a LOESS curve for trend
labs(title = "Relationship Between Education Level and Number of Employees",
x = "Education Level (Numeric)",
y = "Number of Employees") +
theme_minimal()
# Load necessary library
library(dplyr)
library(ggplot2)
# Check and prepare the data
RICA <- RICA %>%
mutate(
EFF10 = as.numeric(as.character(EFF10)),  # Ensuring EFF10 is numeric
ENTMT = as.numeric(as.character(ENTMT))   # Ensuring ENTMT is numeric
) %>%
filter(!is.na(EFF10) & !is.na(ENTMT))  # Removing rows with NA in either column
# Check the first few rows to ensure conversions and filtering are correct
head(RICA)
# Creating the scatter plot
ggplot(RICA, aes(x = EFF10, y = ENTMT)) +
geom_point(aes(color = EFF10), alpha = 0.6) +  # Plot points, colored by EFF10, with transparency
geom_smooth(method = "lm", se = FALSE, color = "blue") +  # Linear regression line without confidence interval
labs(title = "Relationship Between Number of Employees and Maintenance Cost",
x = "Number of Employees",
y = "Maintenance Cost (€)") +
scale_color_gradient(low = "yellow", high = "red") +  # Color gradient for better visualization
theme_minimal()  # Minimal theme for a cleaner look
# Load necessary library
library(dplyr)
library(ggplot2)
# Assuming filter_empl and filter_emain are data frames with the respective variables
# Check the structure to confirm they are numeric and handle NAs if they haven't been addressed
filter_empl$EFF10 <- as.numeric(as.character(filter_empl$EFF10))
filter_emain$ENTMT <- as.numeric(as.character(filter_emain$ENTMT))
# Load necessary library
library(dplyr)
library(ggplot2)
# Assuming filter_empl and filter_emain are data frames with the respective variables
# Check the structure to confirm they are numeric and handle NAs if they haven't been addressed
filter_empl$EFF10 <- as.numeric(as.character(filter_empl$EFF10))
filter_emain$ENTMT <- as.numeric(as.character(filter_Emain$ENTMT))
# Load necessary library
library(dplyr)
library(ggplot2)
# Assuming filter_empl and filter_emain are data frames with the respective variables
# Check the structure to confirm they are numeric and handle NAs if they haven't been addressed
filter_empl$EFF10 <- as.numeric(as.character(filter_empl$EFF10))
filter_emain$ENTMT <- as.numeric(as.character(filter_Emain$ENTMT))
# Load necessary library
library(dplyr)
library(ggplot2)
# Assuming filter_empl and filter_emain are data frames with the respective variables
# Check the structure to confirm they are numeric and handle NAs if they haven't been addressed
filter_empl$EFF10 <- as.numeric(as.character(filter_empl$EFF10))
filter_Emain$ENTMT <- as.numeric(as.character(filter_Emain$ENTMT))
# Combine the datasets assuming they are aligned (same length and order)
# If they are not aligned, you would need a common key to join them by
combined_data <- data.frame(
EFF10 = filter_empl$EFF10,
ENTMT = filter_Emain$ENTMT
)
# Creating the scatter plot
ggplot(RICA, aes(x = EFF10, y = ENTMT)) +
geom_point(aes(color = EFF10), alpha = 0.6) +  # Plot points, colored by EFF10, with transparency
geom_smooth(method = "lm", se = FALSE, color = "blue") +  # Linear regression line without confidence interval
labs(title = "Relationship Between Number of Employees and Maintenance Cost",
x = "Number of Employees",
y = "Maintenance Cost (€)") +
scale_color_gradient(low = "yellow", high = "red") +  # Color gradient for better visualization
theme_minimal()  # Minimal theme for a cleaner look
# Load necessary libraries
library(dplyr)
# Convert numeric data to categories
RICA <- RICA %>%
mutate(
EmployeeCategory = if_else(EFF10 > 0, "Has Employees", "No Employees"),
RevenueCategory = if_else(CHAFF > median(CHAFF, na.rm = TRUE), "High Revenue", "Low Revenue")
)
# Check the first few entries to confirm categorization
head(RICA)
# Create the contingency table
contingency_table <- table(RICA$EmployeeCategory, RICA$RevenueCategory)
# Print the contingency table
print(contingency_table)
# Load necessary library for the chi-squared test
library(stats)
# Perform the chi-squared test
chi_squared_test <- chisq.test(contingency_table)
# Print the results of the chi-squared test
print(chi_squared_test)
# Load ggplot2 for visualization
library(ggplot2)
# Visualize the data
ggplot(RICA, aes(x = EmployeeCategory, fill = RevenueCategory)) +
geom_bar(position = "fill") +
labs(title = "Proportion of Revenue Categories by Employee Status",
x = "Employee Status",
y = "Proportion") +
scale_fill_brewer(palette = "Pastel1") +
theme_minimal()
savehistory("~/R Project/R Project 2.0/RICA PROJECT.Rhistory")
